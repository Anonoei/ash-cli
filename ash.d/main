function _ash_banner {
    echo -ne "$(_ash_escape -s bold -c bblack -c fred)"
    echo '    ___  _____ __  __'
    echo '   /   |/ ___// / / /'
    echo '  / /| |\__ \/ /_/ / '
    echo ' / ___ |__/ / __  /  '
    echo '/_/  |_|___/_/ /_/   '
    echo -ne "$(_ash_escape -r)"
    echo -e "$(_ash_escape -s italic)ASH$(_ash_escape -r) CLI $(_ash_escape -c fblue)v${ASH_VERSION}$(_ash_escape -r)"
    echo ""
}

function _ash_fmt_help {
    # $1 = command
    local arr=("$@")
    local pad=$(printf '%0.2s' "._"{1..20})

    for item in ${arr[@]}; do
        item=(${item//\;/ })
        comm=${item[0]}
        desc=${item[1]}

        msg="$(printf '%s' "$comm")${pad:${#comm}}$(printf '%s\n' "$desc")"
        msg=${msg//_/ }
        echo "  $msg"
    done
}

function _ash_help {
    _ash_banner
    echo "Usage:  ash COMMAND"
    echo ""
    echo "CLI helper"
    echo ""
    echo "Commands:"
    echo " ASH:"
    commands=(
        "h|help;show_this_message"
        "R|reinstall;reinstall_ASH"
        "U|uninstall;uninstall_ASH"
        "u|update;update_ASH"
        "c|config;ASH_configuration_helper"
        "x|extra;ASH_extras"
        "e|escape;ANSI_escape_helper"
        "__log;ASH_logger"
        )
    _ash_fmt_help "${commands[@]}"
    echo ""
    echo "Run 'ash COMMAND --help' for more information on a command"
}

if [[ $# -eq 0 ]]; then
    _ash_help
    return
fi

ASH_CMD=$1
shift
case $ASH_CMD in
    h|help|-h|--help)
        _ash_help $*
        ;;
    R|reinstall)
        _ash_reinstall $*
        ;;
    U|uninstall)
        _ash_uninstall $*
        ;;
    u|update)
        _ash_update $*
        ;;
    r|reload)
        source $ASH_ROOT/a.sh
        ;;
    c|config)
        source $ASH_ROOT/ash.d/config $*
        ;;
    x|extra)
        source $ASH_ROOT/ash.d/extra $*
        ;;
    e|escape)
        _ash_escape $*
        ;;
    log)
        source $ASH_ROOT/ash.d/log $*
        ;;
    *)
        echo "Unknown ash syntax: ash $ASH_CMD $*"
        echo "Run 'ash help' for more information"
        ;;
esac
