function _ash_logger_help {
    echo "ASH Logger"
    echo ""
    echo "An 'object-oriented' logger"
    echo ""
    echo "Usage:"
    echo " source logger <name> [-l <level>] [-f <file>]"
    echo ""
    echo "Arguments:"
    echo "  -h|--help..................shows this message"
    echo "  -l|--level.................sets the logging level"
    echo "  -f|--file..................sets the file to log to"
    echo ""
    echo "Logging:"
    echo "  <name>_trace <unit> <message>"
    echo "  <name>_debug <unit> <message>"
    echo "  <name>_info <unit> <message>"
    echo "  <name>_warn <unit> <message>"
    echo "  <name>_error <unit> <message>"
    echo " Where:"
    echo "    <name> is the name when the logger was sourced"
    echo "    <unit> is the file/unit logging"
    echo "    <message> is the message to log"
    echo ""
    echo "Example usage:"
    echo '```file.sh'
    echo 'source $ASH_ROOT/logger "FiLe" -l "TRACE"'
    echo 'FiLe_info "test" "exmaple"'
    echo '```'
    echo " And it outputs ~ 'FiLe.test <INFO>: example'"
    echo ""
}

function _ash_logger_parse {
    if [[ $# -eq 0 ]]; then
        return
    fi
    ARG=$1
    shift
    case $ARG in
        -h|--help)
            _ash_logger_help
            return
            ;;
        -l|--level)
            ARG_LEVEL=$1
            shift
            ;;
        -f|--file)
            ARG_FILE=$1
            shift
            ;;
        *)
            echo "Unknown argument $ARG!"
            return
            ;;
    esac

    _ash_logger_parse $*
}

if [[ $# -eq 0 ]]; then
    echo "A title must be provided when initializing a logger!"
    return
fi

LOCAL_TITLE=$1
shift

ARG_LEVEL=
ARG_FILE=

_ash_logger_parse $*


# --- Main module --- #

ASH_LOGGER_NAMES=("TRACE" "DEBUG" "INFO" "WARN" "ERROR")
ASH_LOGGER_LEVELS=(5 4 3 2 1)

function ash_logger_level {
    # $1 = name
    if [[ ! ${ASH_LOGGER_NAMES[@]} =~ "$1" ]]; then
        echo 99
        return
    fi

    for ((i=0; $i<${#ASH_LOGGER_NAMES[@]}; i++)); do
        if [[ "${ASH_LOGGER_NAMES[$i]}" == "$1" ]]; then
            echo "${ASH_LOGGER_LEVELS[$i]}"
            return
        fi
    done
}

function __ash_log {
    # $1 parent
    # $2 unit
    # $3 level
    # $4 message
    if [[ ! $# -eq 4 ]]; then
        echo "Invalid log argument count!"
        echo "Arguments: $*"
        return
    fi
    local log_parent="$1"
    local log_unit="$2"
    local log_level="$3"
    local log_msg="$4"

    local log_number=$(ash_logger_level $log_level)

    local parent_level=$(eval "echo \$ASH_LOGGER_${log_parent}_LEVEL")
    local parent_level=$(eval "echo $parent_level")

    local parent_file=$(eval "echo \$ASH_LOGGER_${log_parent}_FILE")
    local parent_file=$(eval "echo $parent_file")

    local log_date="$(date +"%Y-%m-%d_%H%M%S")"
    if [[ ! -z $log_parent ]]; then
        log_unit="$log_parent.$log_unit"
    fi
    local log_header="$log_date $log_unit <$log_level>"

    if [[ ! -z $parent_file ]]; then
        echo "${log_header}: $log_msg" >> $parent_file
    fi

    if [[ ! -z $parent_level ]] && [[ $log_number -gt $parent_level ]]; then
        return
    fi

    echo -ne "$(_ash_escape -s dim)"
    echo -ne "${log_date} "
    echo -ne "$(_ash_escape -s bold -c fcyan)"
    echo -ne "${log_unit}"
    echo -ne "$(_ash_escape -r)"
    echo -ne "$(_ash_escape -s dim)"
    echo -ne " <${log_level}>: "
    echo -ne "$(_ash_escape -r)"
    case $log_level in
        TRACE)
            echo -ne "$(_ash_escape -s dim -c fblue)"
            ;;
        DEBUG)
            echo -ne "$(_ash_escape -s dim -c fgreen)"
            ;;
        INFO)
            echo -ne "$(_ash_escape -s bold -c fwhite)"
            ;;
        WARN)
            echo -ne "$(_ash_escape -s bold -c fyellow)"
            ;;
        ERROR)
            echo -ne "$(_ash_escape -s bold -c fred)"
            ;;
        *)
            ;;
    esac
    echo -ne "${log_msg}"
    echo -ne "$(_ash_escape -r)"
    echo ""
}

function __ash_log_trace {
    # $1 = parent
    # $2 = unit
    # $3 = message
    __ash_log "$1" "$2" "TRACE" "$3"
}

function __ash_log_debug {
    # $1 = parent
    # $2 = unit
    # $3 = message
    __ash_log "$1" "$2" "DEBUG" "$3"
}

function __ash_log_info {
    # $1 = parent
    # $2 = unit
    # $3 = message
    __ash_log "$1" "$2" "INFO" "$3"
}

function __ash_log_warn {
    # $1 = parent
    # $2 = unit
    # $3 = message
    __ash_log "$1" "$2" "WARN" "$3"
}

function __ash_log_error {
    # $1 = parent
    # $2 = unit
    # $3 = message
    __ash_log "$1" "$2" "ERROR" "$3"
}


eval "ASH_LOGGER_${LOCAL_TITLE}_LEVEL=$(ash_logger_level $ARG_LEVEL)"
eval "ASH_LOGGER_${LOCAL_TITLE}_FILE=$ARG_FILE"

eval "${LOCAL_TITLE}_trace() { __ash_log_trace \"${LOCAL_TITLE}\" \"\$1\" \"\$2\"; }"
eval "${LOCAL_TITLE}_debug() { __ash_log_debug \"${LOCAL_TITLE}\" \"\$1\" \"\$2\"; }"
eval "${LOCAL_TITLE}_info()  { __ash_log_info \"${LOCAL_TITLE}\" \"\$1\" \"\$2\"; }"
eval "${LOCAL_TITLE}_warn()  { __ash_log_warn \"${LOCAL_TITLE}\" \"\$1\" \"\$2\"; }"
eval "${LOCAL_TITLE}_error() { __ash_log_error \"${LOCAL_TITLE}\" \"\$1\" \"\$2\"; }"
